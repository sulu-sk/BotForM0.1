"""
Telegram –ë–æ—Ç –¥–ª—è –ó–∞–ø–∏—Å–∏ –Ω–∞ –ü—Ä–∏—ë–º
–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ (–±–∞—Ä–±–µ—Ä—ã, —Å—Ç–∏–ª–∏—Å—Ç—ã –∏ —Ç.–¥.) –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
pip install python-telegram-bot==20.7
"""

import sqlite3
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
MASTER_ID = 1025557118  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
BOT_TOKEN = "8272115600:AAFgmylky-QG3oQNSqw5KcQ2JIzu7N0JmIU"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_PERIOD, SELECTING_DATES, SELECTING_TIME_SLOTS = range(3)
BOOKING_DATE, BOOKING_TIME, BOOKING_NAME = range(3, 6)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
MONTH_NAMES = {
    1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
    5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
    9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
}

WEEKDAY_NAMES = {
    0: '–ü–Ω', 1: '–í—Ç', 2: '–°—Ä', 3: '–ß—Ç', 4: '–ü—Ç', 5: '–°–±', 6: '–í—Å'
}

WEEKDAY_FULL = {
    0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–≤—Ç–æ—Ä–Ω–∏–∫', 2: '—Å—Ä–µ–¥–∞', 3: '—á–µ—Ç–≤–µ—Ä–≥',
    4: '–ø—è—Ç–Ω–∏—Ü–∞', 5: '—Å—É–±–±–æ—Ç–∞', 6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}


# ==================== DATABASE ====================
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('bookings.db')
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS available_slots
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  date TEXT NOT NULL,
                  time TEXT NOT NULL,
                  is_booked INTEGER DEFAULT 0,
                  UNIQUE(date, time))''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS bookings
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  client_name TEXT NOT NULL,
                  client_username TEXT,
                  client_id INTEGER,
                  date TEXT NOT NULL,
                  time TEXT NOT NULL,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    conn.commit()
    conn.close()


def get_db():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return sqlite3.connect('bookings.db')


def add_available_slots(dates, times):
    """–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã"""
    conn = get_db()
    c = conn.cursor()
    
    for date in dates:
        for time in times:
            try:
                c.execute('INSERT OR IGNORE INTO available_slots (date, time) VALUES (?, ?)',
                         (date, time))
            except Exception as e:
                print(f"[ERROR] Failed to add slot {date} {time}: {e}")
    
    conn.commit()
    conn.close()


def get_available_dates():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏"""
    conn = get_db()
    c = conn.cursor()
    c.execute('''SELECT DISTINCT date FROM available_slots 
                 WHERE is_booked = 0 
                 ORDER BY date''')
    dates = [row[0] for row in c.fetchall()]
    conn.close()
    return dates


def get_available_times(date):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
    conn = get_db()
    c = conn.cursor()
    c.execute('''SELECT time FROM available_slots 
                 WHERE date = ? AND is_booked = 0 
                 ORDER BY time''', (date,))
    times = [row[0] for row in c.fetchall()]
    conn.close()
    return times


def book_appointment(client_name, client_username, client_id, date, time):
    """–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å"""
    conn = get_db()
    c = conn.cursor()
    
    try:
        c.execute('''UPDATE available_slots 
                     SET is_booked = 1 
                     WHERE date = ? AND time = ?''', (date, time))
        
        c.execute('''INSERT INTO bookings 
                     (client_name, client_username, client_id, date, time) 
                     VALUES (?, ?, ?, ?, ?)''',
                 (client_name, client_username, client_id, date, time))
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        print(f"[ERROR] Booking failed: {e}")
        conn.close()
        return False


def get_all_bookings():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è CRM"""
    conn = get_db()
    c = conn.cursor()
    c.execute('''SELECT client_name, client_username, date, time, created_at 
                 FROM bookings 
                 ORDER BY date, time''')
    bookings = c.fetchall()
    conn.close()
    return bookings


def cancel_booking(date, time):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–ª–æ—Ç"""
    conn = get_db()
    c = conn.cursor()
    
    try:
        c.execute('SELECT client_id FROM bookings WHERE date = ? AND time = ?', (date, time))
        result = c.fetchone()
        client_id = result[0] if result else None
        
        c.execute('UPDATE available_slots SET is_booked = 0 WHERE date = ? AND time = ?',
                 (date, time))
        c.execute('DELETE FROM bookings WHERE date = ? AND time = ?', (date, time))
        conn.commit()
        conn.close()
        return True, client_id
    except Exception as e:
        print(f"[ERROR] Cancel booking failed: {e}")
        conn.close()
        return False, None


def delete_date_slots(date):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ—Ç—ã –∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
    conn = get_db()
    c = conn.cursor()
    
    try:
        c.execute('SELECT client_name, client_id, time FROM bookings WHERE date = ?', (date,))
        affected_bookings = c.fetchall()
        
        c.execute('DELETE FROM bookings WHERE date = ?', (date,))
        c.execute('DELETE FROM available_slots WHERE date = ?', (date,))
        
        conn.commit()
        conn.close()
        return True, affected_bookings
    except Exception as e:
        print(f"[ERROR] Delete date slots failed: {e}")
        conn.close()
        return False, []


def get_dates_with_slots():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞—Ç—ã, –≥–¥–µ –µ—Å—Ç—å —Å–ª–æ—Ç—ã"""
    conn = get_db()
    c = conn.cursor()
    c.execute('''SELECT DISTINCT date FROM available_slots 
                 ORDER BY date''')
    dates = [row[0] for row in c.fetchall()]
    conn.close()
    return dates


# ==================== UTILITIES ====================
def format_date_russian(date_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    day = date_obj.day
    month = MONTH_NAMES[date_obj.month]
    year = date_obj.year
    weekday = WEEKDAY_FULL[date_obj.weekday()]
    return f"{day} {month} {year} ({weekday})"


def format_date_short(date_str):
    """–ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"""
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    day = date_obj.day
    month = MONTH_NAMES[date_obj.month]
    weekday = WEEKDAY_NAMES[date_obj.weekday()]
    return f"{day} {month} ({weekday})"


def get_master_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—ã", callback_data="master_setdays")],
        [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏ (CRM)", callback_data="master_crm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="master_cancel_booking")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å", callback_data="master_delete_day")],
    ])


def get_client_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", callback_data="client_book")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="client_mybookings")]
    ])


# ==================== COMMAND HANDLERS ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    if user.id == MASTER_ID:
        message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ú–∞—Å—Ç–µ—Ä!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await update.message.reply_text(message, reply_markup=get_master_menu_keyboard())
    else:
        message = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await update.message.reply_text(message, reply_markup=get_client_menu_keyboard())


async def crm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞)"""
    user = update.effective_user
    
    if user.id != MASTER_ID:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.")
        return
    
    bookings = get_all_bookings()
    
    if not bookings:
        await update.message.reply_text("üìä –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    message = "üìä *–í—Å–µ –∑–∞–ø–∏—Å–∏:*\n\n"
    current_date = None
    
    for booking in bookings:
        client_name, client_username, date, time, created_at = booking
        
        if date != current_date:
            display_date = format_date_russian(date)
            message += f"\nüìÖ *{display_date}*\n"
            current_date = date
        
        username_display = f"@{client_username}" if client_username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ —É–∫–∞–∑–∞–Ω"
        message += f"  ‚Ä¢ {time} ‚Äî {client_name} ({username_display})\n"
    
    await update.message.reply_text(message, parse_mode='Markdown')


# ==================== MASTER HANDLERS ====================
async def setdays_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π"""
    query = update.callback_query if update.callback_query else None
    user = query.from_user if query else update.effective_user
    
    if user.id != MASTER_ID:
        message = "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."
        if query:
            await query.edit_message_text(message)
        else:
            await update.message.reply_text(message)
        return ConversationHandler.END
    
    keyboard = [
        [InlineKeyboardButton("1 –ù–µ–¥–µ–ª—è", callback_data="period_7")],
        [InlineKeyboardButton("2 –ù–µ–¥–µ–ª–∏", callback_data="period_14")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç:"
    if query:
        await query.answer()
        await query.edit_message_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)
    
    return CHOOSING_PERIOD


async def period_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_menu":
        await query.edit_message_text(
            "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_master_menu_keyboard()
        )
        return ConversationHandler.END
    
    try:
        days = int(query.data.split("_")[1])
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç
        dates = []
        today = datetime.now()
        for i in range(days):
            date = today + timedelta(days=i)
            dates.append(date.strftime("%Y-%m-%d"))
        
        context.user_data['dates'] = dates
        context.user_data['selected_dates'] = []
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏
        keyboard = []
        for i in range(0, len(dates), 2):
            row = []
            for j in range(i, min(i + 2, len(dates))):
                display = format_date_short(dates[j])
                row.append(InlineKeyboardButton(display, callback_data=f"date_{dates[j]}"))
            keyboard.append(row)
        
        keyboard.append([
            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="dates_done"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã ({len(dates)} –¥–Ω–µ–π):\n"
            "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –¥–∞—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ.",
            reply_markup=reply_markup
        )
        
        return SELECTING_DATES
        
    except Exception as e:
        print(f"[ERROR] Error in period_selected: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END


async def date_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_menu":
        await query.edit_message_text(
            "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_master_menu_keyboard()
        )
        context.user_data.clear()
        return ConversationHandler.END
    
    if query.data == "dates_done":
        if not context.user_data.get('selected_dates'):
            await query.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∞—Ç—É!", show_alert=True)
            return SELECTING_DATES
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        time_slots = []
        for hour in range(9, 21):
            time_slots.append(f"{hour:02d}:00")
            if hour < 20:
                time_slots.append(f"{hour:02d}:30")
        
        context.user_data['available_times'] = time_slots
        context.user_data['selected_times'] = []
        
        keyboard = []
        for i in range(0, len(time_slots), 4):
            row = []
            for j in range(i, min(i + 4, len(time_slots))):
                row.append(InlineKeyboardButton(
                    time_slots[j], 
                    callback_data=f"timeslot_{time_slots[j]}"
                ))
            keyboard.append(row)
        
        keyboard.append([
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="times_done"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_period")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:\n"
            "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–±–æ—Ä–∞.\n"
            "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω–æ ‚úÖ\n\n"
            "–í—ã–±—Ä–∞–Ω–æ: 0",
            reply_markup=reply_markup
        )
        return SELECTING_TIME_SLOTS
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–∞—Ç—É
    date = query.data.split("_")[1]
    selected = context.user_data.get('selected_dates', [])
    
    if date in selected:
        selected.remove(date)
    else:
        selected.append(date)
    
    context.user_data['selected_dates'] = selected
    
    # –ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    dates = context.user_data['dates']
    keyboard = []
    for i in range(0, len(dates), 2):
        row = []
        for j in range(i, min(i + 2, len(dates))):
            display = format_date_short(dates[j])
            if dates[j] in selected:
                display = f"‚úÖ {display}"
            row.append(InlineKeyboardButton(display, callback_data=f"date_{dates[j]}"))
        keyboard.append(row)
    
    keyboard.append([
        InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="dates_done"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    ])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ (–≤—ã–±—Ä–∞–Ω–æ: {len(selected)}/{len(dates)}):\n"
        f"–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –¥–∞—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ.",
        reply_markup=reply_markup
    )
    
    return SELECTING_DATES


async def time_slot_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "times_done":
        selected_times = context.user_data.get('selected_times', [])
        
        if not selected_times:
            await query.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç!", show_alert=True)
            return SELECTING_TIME_SLOTS
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        dates = context.user_data['selected_dates']
        add_available_slots(dates, selected_times)
        
        dates_display = ', '.join([format_date_short(d) for d in dates])
        
        await query.edit_message_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(dates)} –¥–∞—Ç(—ã) —Å {len(selected_times)} –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏!\n\n"
            f"–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(dates) * len(selected_times)}\n\n"
            f"–î–∞—Ç—ã: {dates_display}\n"
            f"–í—Ä–µ–º—è: {', '.join(sorted(selected_times))}"
        )
        
        context.user_data.clear()
        return ConversationHandler.END
    
    if query.data == "back_to_period":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç
        dates = context.user_data['dates']
        keyboard = []
        for i in range(0, len(dates), 2):
            row = []
            for j in range(i, min(i + 2, len(dates))):
                display = format_date_short(dates[j])
                row.append(InlineKeyboardButton(display, callback_data=f"date_{dates[j]}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="dates_done")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        context.user_data['selected_dates'] = []
        
        await query.edit_message_text(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ (–≤—ã–±—Ä–∞–Ω–æ: 0/{len(dates)}):\n"
            f"–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –¥–∞—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ.",
            reply_markup=reply_markup
        )
        return SELECTING_DATES
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
    time = query.data.split("_")[1]
    selected_times = context.user_data.get('selected_times', [])
    
    if time in selected_times:
        selected_times.remove(time)
    else:
        selected_times.append(time)
    
    context.user_data['selected_times'] = selected_times
    
    # –ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    time_slots = context.user_data['available_times']
    keyboard = []
    
    for i in range(0, len(time_slots), 4):
        row = []
        for j in range(i, min(i + 4, len(time_slots))):
            display = time_slots[j]
            if time_slots[j] in selected_times:
                display = f"‚úÖ {display}"
            row.append(InlineKeyboardButton(
                display, 
                callback_data=f"timeslot_{time_slots[j]}"
            ))
        keyboard.append(row)
    
    keyboard.append([
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="times_done"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_period")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–±–æ—Ä–∞.\n"
        "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω–æ ‚úÖ\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_times)}",
        reply_markup=reply_markup
    )
    
    return SELECTING_TIME_SLOTS


# ==================== CLIENT BOOKING HANDLERS ====================
async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    dates = get_available_dates()
    if not dates:
        await query.edit_message_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )
        return ConversationHandler.END

    keyboard = []
    for i in range(0, len(dates), 2):
        row = []
        for j in range(i, min(i + 2, len(dates))):
            display_date = format_date_short(dates[j])
            row.append(InlineKeyboardButton(display_date, callback_data=f"bookdate_{dates[j]}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    
    await query.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return BOOKING_DATE


async def booking_date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_menu":
        await query.edit_message_text(
            "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_client_menu_keyboard()
        )
        context.user_data.clear()
        return ConversationHandler.END
    
    if query.data == "back_to_dates":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç
        dates = get_available_dates()
        keyboard = []
        for i in range(0, len(dates), 2):
            row = []
            for j in range(i, min(i + 2, len(dates))):
                display_date = format_date_short(dates[j])
                row.append(InlineKeyboardButton(display_date, callback_data=f"bookdate_{dates[j]}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        await query.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return BOOKING_DATE
    
    # –ò–∑–≤–ª–µ—á—å –¥–∞—Ç—É
    date = query.data.replace("bookdate_", "")
    context.user_data['booking_date'] = date
    
    # –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
    times = get_available_times(date)
    
    if not times:
        await query.edit_message_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —É–∂–µ –∑–∞–Ω—è—Ç—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_dates")
            ]])
        )
        return BOOKING_DATE
    
    # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = []
    for i in range(0, len(times), 3):
        row = []
        for j in range(i, min(i + 3, len(times))):
            row.append(InlineKeyboardButton(times[j], callback_data=f"booktime_{times[j]}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_dates")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    display_date = format_date_russian(date)
    
    await query.edit_message_text(
        f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {display_date}:",
        reply_markup=reply_markup
    )
    
    return BOOKING_TIME


async def booking_time_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_dates":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç
        dates = get_available_dates()
        keyboard = []
        for i in range(0, len(dates), 2):
            row = []
            for j in range(i, min(i + 2, len(dates))):
                display_date = format_date_short(dates[j])
                row.append(InlineKeyboardButton(display_date, callback_data=f"bookdate_{dates[j]}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        await query.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return BOOKING_DATE
    
    # –ò–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è
    time = query.data.replace("booktime_", "")
    context.user_data['booking_time'] = time
    
    date = context.user_data['booking_date']
    display_date = format_date_russian(date)
    
    await query.edit_message_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ:\n"
        f"üìÖ –î–∞—Ç–∞: {display_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time}\n\n"
        f"üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
    )
    
    return BOOKING_NAME


async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id == MASTER_ID:
        await query.edit_message_text(
            "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞",
            reply_markup=get_master_menu_keyboard()
        )
    else:
        await query.edit_message_text(
            "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_client_menu_keyboard()
        )
    return ConversationHandler.END

# Fix booking_name_received handler
async def booking_name_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    print("[DEBUG] booking_name_received called")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    try:
        client_name = update.message.text.strip()
        
        if len(client_name) < 2:
            await update.message.reply_text(
                "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â—ë —Ä–∞–∑:"
            )
            return BOOKING_NAME
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        date = context.user_data.get('booking_date')
        time = context.user_data.get('booking_time')
        
        print(f"[DEBUG] Booking details: date={date}, time={time}")  # –û—Ç–ª–∞–¥–∫–∞
        
        if not date or not time:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ:",
                reply_markup=get_client_menu_keyboard()
            )
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        client_username = user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
        client_id = user.id
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å
        success = book_appointment(
            client_name=client_name,
            client_username=client_username,
            client_id=client_id,
            date=date,
            time=time
        )
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            display_date = format_date_russian(date)
            await update.message.reply_text(
                f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                f"üë§ –ò–º—è: {client_name}\n"
                f"üìÖ –î–∞—Ç–∞: {display_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time}\n\n"
                f"–ñ–¥—ë–º –≤–∞—Å! üòä",
                reply_markup=get_client_menu_keyboard()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
            try:
                await context.bot.send_message(
                    chat_id=MASTER_ID,
                    text=(
                        f"üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n"
                        f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
                        f"üîπ Username: @{client_username}\n"
                        f"üìÖ –î–∞—Ç–∞: {display_date}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {time}"
                    )
                )
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞: {e}")
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=get_client_menu_keyboard()
            )
    
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ booking_name_received: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_client_menu_keyboard()
        )
    
    finally:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if context.user_data:
            context.user_data.clear()
    
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"[ERROR] Exception while handling an update: {context.error}")

async def handle_master_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–Ω–µ–ª–∏ –º–∞—Å—Ç–µ—Ä–∞"""
    query = update.callback_query
    await query.answer()

    if query.data == "back_to_menu":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if query.from_user.id == MASTER_ID:
            await query.edit_message_text(
                "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞",
                reply_markup=get_master_menu_keyboard()
            )
        else:
            await query.edit_message_text(
                "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_client_menu_keyboard()
            )
        return

    if query.from_user.id != MASTER_ID:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    if query.data == "master_crm":
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
        bookings = get_all_bookings()
        if not bookings:
            await query.edit_message_text(
                "üìä –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]])
            )
            return

        message = "üìä *–í—Å–µ –∑–∞–ø–∏—Å–∏:*\n\n"
        current_date = None
        
        for booking in bookings:
            client_name, client_username, date, time, created_at = booking
            
            if date != current_date:
                display_date = format_date_russian(date)
                message += f"\nüìÖ *{display_date}*\n"
                current_date = date
            
            username_display = f"@{client_username}" if client_username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ —É–∫–∞–∑–∞–Ω"
            message += f"  ‚Ä¢ {time} ‚Äî {client_name} ({username_display})\n"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CRM: {e}")
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–¥–µ–ª–∏–º –µ–≥–æ
            if len(message) > 4096:
                parts = [message[i:i+4096] for i in range(0, len(message), 4096)]
                for i, part in enumerate(parts):
                    if i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
                        await query.edit_message_text(
                            part,
                            reply_markup=reply_markup,
                            parse_mode='Markdown'
                        )
                    else:
                        await context.bot.send_message(
                            chat_id=query.message.chat_id,
                            text=part,
                            parse_mode='Markdown'
                        )
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π",
                    reply_markup=reply_markup
                )
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–Ω–µ–ª–∏ –º–∞—Å—Ç–µ—Ä–∞"""
    query = update.callback_query
    await query.answer()

    if query.data == "back_to_menu":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if query.from_user.id == MASTER_ID:
            await query.edit_message_text(
                "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞",
                reply_markup=get_master_menu_keyboard()
            )
        else:
            await query.edit_message_text(
                "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_client_menu_keyboard()
            )
        return

    if query.from_user.id != MASTER_ID:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    elif query.data == "master_cancel_booking":
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
        dates = get_dates_with_slots()
        if not dates:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]])
            )
            return

        keyboard = []
        for date in dates:
            display_date = format_date_short(date)
            keyboard.append([
                InlineKeyboardButton(display_date, callback_data=f"cancel_date_{date}")
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏:",
            reply_markup=reply_markup
        )

    elif query.data == "master_delete_day":
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        dates = get_dates_with_slots()
        if not dates:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]])
            )
            return

        keyboard = []
        for date in dates:
            display_date = format_date_short(date)
            keyboard.append([
                InlineKeyboardButton(display_date, callback_data=f"delete_day_{date}")
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n"
            "(–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É):",
            reply_markup=reply_markup
        )
# –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handle_cancel_date:

async def handle_cancel_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    query = update.callback_query
    await query.answer()

    if query.from_user.id != MASTER_ID:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        if query.data.startswith("cancel_date_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
            date = query.data.replace("cancel_date_", "")
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            conn = get_db()
            c = conn.cursor()
            c.execute('''
                SELECT time, client_name, client_username 
                FROM bookings 
                WHERE date = ? 
                ORDER BY time
            ''', (date,))
            bookings = c.fetchall()
            conn.close()

            if not bookings:
                await query.edit_message_text(
                    "‚ùå –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="master_cancel_booking")
                    ]])
                )
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–ø–∏—Å—è–º–∏
            keyboard = []
            for time, client_name, client_username in bookings:
                display_name = f"{client_name} (@{client_username})" if client_username else client_name
                # –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data
                callback_data = f"cancel_booking_{date}_{time}_{client_name}"
                keyboard.append([
                    InlineKeyboardButton(
                        f"{time} - {display_name}", 
                        callback_data=callback_data
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="master_cancel_booking")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            display_date = format_date_russian(date)
            await query.edit_message_text(
                f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {display_date}:\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
                reply_markup=reply_markup
            )

        elif query.data.startswith("cancel_booking_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
            parts = query.data.split("_")
            date = parts[2]
            time = parts[3]
            
            success, client_id = cancel_booking(date, time)
            
            if success:
                display_date = format_date_russian(date)
                await query.edit_message_text(
                    f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n"
                    f"–î–∞—Ç–∞: {display_date}\n"
                    f"–í—Ä–µ–º—è: {time}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
                    ]])
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å client_id
                if client_id:
                    try:
                        await context.bot.send_message(
                            chat_id=client_id,
                            text=f"‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {display_date} –≤ {time} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–º."
                        )
                    except Exception as e:
                        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="master_cancel_booking")
                    ]])
                )
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ handle_cancel_date: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
            ]])
        )

# Update conversation handlers in main()
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    init_db()
    
    # Master conversation handler
    master_conv = ConversationHandler(
        entry_points=[
            CommandHandler("setdays", setdays_start),
            CallbackQueryHandler(setdays_start, pattern="^master_setdays$")
        ],
        states={
            CHOOSING_PERIOD: [
                CallbackQueryHandler(period_selected, pattern="^period_"),
                CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")
            ],
            SELECTING_DATES: [
                CallbackQueryHandler(date_toggle, pattern="^date_"),
                CallbackQueryHandler(date_toggle, pattern="^dates_done$"),
                CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")
            ],
            SELECTING_TIME_SLOTS: [
                CallbackQueryHandler(time_slot_toggle, pattern="^timeslot_"),
                CallbackQueryHandler(time_slot_toggle, pattern="^times_done$"),
                CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")
            ]
        },
        fallbacks=[CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")],
        per_chat=True,
        name="master_conversation"
    )

    # Client booking conversation handler
    booking_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_booking, pattern="^client_book$")],
        states={
            BOOKING_DATE: [
                CallbackQueryHandler(booking_date_selected, pattern="^bookdate_"),
                CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")
            ],
            BOOKING_TIME: [
                CallbackQueryHandler(booking_time_selected, pattern="^booktime_"),
                CallbackQueryHandler(booking_date_selected, pattern="^back_to_dates$"),
                CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")
            ],
            BOOKING_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, booking_name_received),
                CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")
            ]
        },
        fallbacks=[CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")],
        per_chat=True,
        name="booking_conversation"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–∞—Å—Ç–µ—Ä–∞
    application.add_handler(CallbackQueryHandler(
        handle_master_buttons,
        pattern="^(master_crm|master_cancel_booking|master_delete_day|back_to_menu)$"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π
    application.add_handler(CallbackQueryHandler(
        handle_cancel_date,
        pattern="^(cancel_date_|cancel_booking_).*$"
    ))
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("crm", crm))
    application.add_handler(master_conv)
    application.add_handler(booking_conv)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–∞—Å—Ç–µ—Ä–∞
    application.add_handler(CallbackQueryHandler(
        handle_master_buttons,
        pattern="^(master_crm|master_cancel_booking|master_delete_day|back_to_menu)$"
    ))

    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()

